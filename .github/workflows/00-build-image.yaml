# Publishing and installing a package with GitHub Actions: https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  release:
    types: [published]
  push:
    tags:
      - 'v*' # 匹配所有以 v 开头的 tag，例如 v1.0.0
    branches:
      - main
      - dev

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      
    strategy:
      matrix:
        go_version:
          - "1.20"
          - "1.21"
          - "1.22"
          - "1.23"
          - "1.24"
        platforms:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Info for Go ${{ matrix.go_version }} on ${{ matrix.platforms }}
        run: |
          echo "Go version: $(go version)"
          echo "Matrix Go version: ${{ matrix.go_version }}"
          echo "Platform: ${{ matrix.platforms }}"

      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        run: |
          GO_TAG=go${{ matrix.go_version }}
          PLATFORM_TAG="${GO_TAG}-${{ matrix.platforms }}"
          # 替换平台中的 `/` 为 `_`
          PLATFORM_TAG=$(echo "$PLATFORM_TAG" | tr '/' '_')
          echo "tags=$GO_TAG" >> $GITHUB_OUTPUT
          echo "platform_tag=$PLATFORM_TAG" >> $GITHUB_OUTPUT
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      # group: login and push to GHCR
      - name: Log in to GHCR
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # (supports multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: push
        with:
          context: .
          file: ./dockerfiles/Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.tags }}
            ${{ steps.meta.outputs.tag != '' && format('ghcr.io/{0}:{1}', github.repository, steps.meta.outputs.tag) || '' }}
          # 删除 ghcr.io/${{ github.repository }}:latest
          build-args: |
            GO_VERSION=${{ matrix.go_version }}
          platforms: |
            ${{ matrix.platforms }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'release' }}
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true